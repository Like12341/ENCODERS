### begin from cored.py
import SocketServer, fcntl, struct, sys, threading, time, traceback
import os, sys, optparse, ConfigParser, gc, shlex
import atexit
import signal
### end from cored.py

### begin from cored.py
from core.constants import *
from core.api import coreapi
from core.coreobj import PyCoreNet
from core.misc.utils import hexdump
### end from cored.py
import cored

from core import pycore
from core.misc import ipaddr
from core.misc.utils import mutecall

from time import sleep

from core.service import CoreService, addservice

class JoshService(CoreService):
    ''' This is a sample user-defined service. 
    '''
    # a unique name is required, without spaces
    _name = "HaggleJosh"
    # you can create your own group here
    _group = "Josh"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
#    _dirs = ("/home/%s/.Haggle/" % (USER,) ,)
    _dirs = ("/home/josh/.Haggle/" ,)
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('haggleservice.sh', )
    # this controls the starting order vs other enabled services
    _startindex = 50
    # list of startup commands, also may be generated during startup
    _startup = ('sh haggleservice.sh', )
    # list of shutdown commands
    _shutdown = ()

    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return a string that will be written to filename, or sent to the
            GUI for user customization.
        '''
        cfg = "#!/bin/sh\n"
        cfg += "# this file, haggleservice.sh, auto-generated by HaggleService (haggle.py)\n"
        cfg += "chmod -R 777 . \n"
        cfg += "/bin/su - josh\n"
        #cfg += "/usr/local/bin/haggle -dd -f"
        cfg += "/bin/su - josh -c \"xterm -geometry 200x50 -sl 10000 -e /usr/local/bin/haggle -dd -f\"\n"
        return cfg



def test(numnodes, testsec,session):
    # node list
    n = []
    # IP subnet
    prefix = ipaddr.IPv4Prefix("10.83.0.0/16")
    
    # emulated network
    net = session.addobj(cls = pycore.nodes.WlanNode)
    
    net.setposition(x=150.0,y=100.0)
    
    #,nodedir='/home/josh/.Haggle'
    
    for i in xrange(1, numnodes + 1):    
        tmp = session.addobj(cls = pycore.nodes.CoreNode, name = "n%d" % i)
        tmp.newnetif(net, ["%s/%s" % (prefix.addr(i), prefix.prefixlen)])
#        tmp.addservice("Haggle")
#        tmp.addservice("HaggleJosh")
#        session.services.addservicestonode(tmp, "josh","Haggle", True)
#        session.services.addservicestonode(tmp, "josh","HaggleJosh", True)
        
        n.append(tmp)
    net.link(n[0].netif(0), n[-1].netif(0))

    n[0].setposition(x=150.0,y=153.0)
    n[1].setposition(x=364.0,y=202.0)

#    n[0].term("bash")
    
    #n[0].cmd(["su","-","josh"])
    #n[0].cmd(["echo","hi",">","/home/josh/.Haggle/josh.log"])
    '''
    n[0].cmd(["echo","asdfasfd"])
    n[0].cmd(["iperf", "-s", "-D"])
    n[-1].icmd(["iperf", "-t", str(int(testsec)), "-c", str(prefix.addr(1))])
    n[0].cmd(["killall", "-9", "iperf"])
    '''
    

def main():
    addservice(JoshService)
    
    session = pycore.Session(persistent=True)      
    
    test(2,100,session)
    
    # now we launch cored.py services so GUI can connect to this script
    print "launching cored services"
    # the following lines are from cored.py cored()
    cfg, args = cored.getMergedConfig("%s/core.conf" % CORE_CONF_DIR)
    cored.banner()
    server = cored.CoreServer(("localhost", coreapi.CORE_API_PORT),
                              cored.CoreRequestHandler, cfg)
    print "adding session %s to cored.server" % session.sessionid
    server.addsession(session)
    print "running cored server - you may now connect the GUI"
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass    
    
if __name__ == "__main__":
    main()
    
    